name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch: # Allow manual trigger

env:
  NODE_VERSION: '22'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: staging
      url: https://debate-platform-staging.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        id: vercel-deployment
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}
        env:
          VERCEL_ENV: production # Deploy as "production" on Vercel (for custom domain)

      - name: Add environment variables to Vercel
        run: |
          npx vercel env add DATABASE_URL production "${{ secrets.STAGING_DATABASE_URL }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add NEXTAUTH_URL production "${{ secrets.STAGING_NEXTAUTH_URL }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add NEXTAUTH_SECRET production "${{ secrets.STAGING_NEXTAUTH_SECRET }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add GOOGLE_CLIENT_ID production "${{ secrets.GOOGLE_CLIENT_ID }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add GOOGLE_CLIENT_SECRET production "${{ secrets.GOOGLE_CLIENT_SECRET }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add CLIENT_ID_GITHUB production "${{ secrets.CLIENT_ID_GITHUB }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add CLIENT_SECRET_GITHUB production "${{ secrets.CLIENT_SECRET_GITHUB }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add RESEND_API_KEY production "${{ secrets.RESEND_API_KEY }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add RESEND_FROM_EMAIL production "${{ secrets.RESEND_FROM_EMAIL }}" --token ${{ secrets.VERCEL_TOKEN }}
          npx vercel env add NODE_ENV production "staging" --token ${{ secrets.VERCEL_TOKEN }}

      - name: Seed staging database (optional)
        run: npm run prisma:seed
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        continue-on-error: true # Don't fail if seed fails

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl --fail ${{ secrets.STAGING_NEXTAUTH_URL }}/api/health || echo "Health check failed, but deployment may still be in progress"

      - name: Deployment summary
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo "üåê URL: ${{ secrets.STAGING_NEXTAUTH_URL }}"
          echo "üìä Deployment: ${{ steps.vercel-deployment.outputs.preview-url }}"